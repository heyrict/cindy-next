# Add tables
- args:
    sql: CREATE TABLE "public"."sui_hei_tag"(
           "id" serial NOT NULL,
           "name" varchar(63) NOT NULL,
           "created" timestamp with time zone NOT NULL DEFAULT now(),
           PRIMARY KEY ("id")
         );
  type: run_sql
- args:
    name: sui_hei_tag
    schema: public
  type: add_existing_table_or_view
- args:
    sql: CREATE TABLE "public"."sui_hei_puzzle_tag" (
           "id" serial NOT NULL,
           "puzzle_id" integer NOT NULL,
           "tag_id" integer NOT NULL,
           "user_id" integer NOT NULL,
           PRIMARY KEY ("id") ,
           FOREIGN KEY ("tag_id") REFERENCES "public"."sui_hei_tag"("id") ON UPDATE restrict ON DELETE restrict,
           FOREIGN KEY ("puzzle_id") REFERENCES "public"."sui_hei_puzzle"("id") ON UPDATE restrict ON DELETE restrict,
           UNIQUE ("puzzle_id", "tag_id"),
           FOREIGN KEY ("user_id") REFERENCES "public"."sui_hei_user"("id") ON UPDATE restrict ON DELETE restrict
         );
  type: run_sql
- args:
    name: sui_hei_puzzle_tag
    schema: public
  type: add_existing_table_or_view

# Add relationships
- args:
    name: sui_hei_puzzle_tags
    table:
      name: sui_hei_puzzle
      schema: public
    using:
      foreign_key_constraint_on:
        column: puzzle_id
        table:
          name: sui_hei_puzzle_tag
          schema: public
  type: create_array_relationship
- args:
    name: sui_hei_puzzle
    table:
      name: sui_hei_puzzle_tag
      schema: public
    using:
      foreign_key_constraint_on: puzzle_id
  type: create_object_relationship
- args:
    name: sui_hei_tag
    table:
      name: sui_hei_puzzle_tag
      schema: public
    using:
      foreign_key_constraint_on: tag_id
  type: create_object_relationship
- args:
    name: sui_hei_user
    table:
      name: sui_hei_puzzle_tag
      schema: public
    using:
      foreign_key_constraint_on: user_id
  type: create_object_relationship
- args:
    name: sui_hei_puzzle_tags
    table:
      name: sui_hei_tag
      schema: public
    using:
      foreign_key_constraint_on:
        column: tag_id
        table:
          name: sui_hei_puzzle_tag
          schema: public
  type: create_array_relationship

# Add permissions
## Anonymous
- args:
    permission:
      allow_aggregations: true
      columns: '*'
      filter: {}
      limit: null
    role: anonymous
    table:
      name: sui_hei_tag
      schema: public
  type: create_select_permission
- args:
    permission:
      allow_aggregations: true
      columns: '*'
      filter: {}
      limit: null
    role: anonymous
    table:
      name: sui_hei_puzzle_tag
      schema: public
  type: create_select_permission
## User
- args:
    permission:
      allow_aggregations: true
      columns: '*'
      filter: {}
      limit: null
    role: user
    table:
      name: sui_hei_puzzle_tag
      schema: public
  type: create_select_permission
- args:
    permission:
      check:
        user_id: X-HASURA-USER-ID
      set:
        user_id: X-HASURA-USER-ID
      columns: "*"
    role: user
    table:
      name: sui_hei_puzzle_tag
      schema: public
  type: create_insert_permission
- args:
    permission:
      filter:
        $or:
          - user_id: X-HASURA-USER-ID
          - sui_hei_puzzle:
              user_id:
                $eq: X-HASURA-USER-ID
    role: user
    table:
      name: sui_hei_puzzle_tag
      schema: public
  type: create_delete_permission
- args:
    permission:
      allow_aggregations: true
      columns: '*'
      filter: {}
      limit: null
    role: user
    table:
      name: sui_hei_tag
      schema: public
  type: create_select_permission
- args:
    permission:
      check: {}
      set: {}
      columns: "*"
    role: user
    table:
      name: sui_hei_tag
      schema: public
  type: create_insert_permission

# Add triggers
- args:
    cascade: false
    sql: |-
      CREATE OR REPLACE FUNCTION maybe_delete_tag_after_puzzle_tag_delete()
      RETURNS TRIGGER as $$
      DECLARE
        puzzle_tag_count INTEGER;
      BEGIN
        SELECT count(id) FROM sui_hei_puzzle_tag WHERE tag_id = OLD.tag_id INTO puzzle_tag_count;
        IF puzzle_tag_count = 0 THEN
          DELETE from sui_hei_tag WHERE id = OLD.tag_id;
        END IF;
        RETURN OLD;
      END;
      $$ LANGUAGE 'plpgsql';

      CREATE TRIGGER maybe_delete_tag_after_puzzle_tag_delete_trigger AFTER DELETE
      ON public.sui_hei_puzzle_tag
      FOR EACH ROW
      EXECUTE PROCEDURE maybe_delete_tag_after_puzzle_tag_delete();
  type: run_sql
